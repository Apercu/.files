# Snippets included :
#
#   - def................................. Basic define
#   - inc................................. Include "" style
#   - Inc................................. Include <> style
#   - main................................ int main (ac, av)
#   - once................................ 'ifndef...define' couple
#   - wh.................................. Basic 'while' loop
#   - if.................................. Basic 'if'
#   - el.................................. Basic 'else'
#   - ife................................. 'if...else' couple
#   - printf.............................. So cool
#   - fn.................................. Function
#   - fnd................................. Function declaration
#   - mal................................. Easy malloc

snippet mal
if (!(${1:name} = (${2:type} *${3}) malloc(sizeof($2${4})${5: * ${6:n}})))
    ft_error("Can't malloc '$1'");${0}
endsnippet

snippet log
ft_log(${1});${0}
endsnippet

snippet def
# define ${1}
endsnippet

snippet inc
#include "${1}.h"
endsnippet

snippet Inc
#include <${1:stdio}.h>
endsnippet

snippet main
int             main(int ac, char *av[])
{
    ${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
    return (0);
}
endsnippet

snippet once
#ifndef ${1:`!p
if not snip.c:
    import random, string
    name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
    rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
    snip.rv = ('%s_%s' % (name,rand)).upper()
else:
    snip.rv = snip.c`}
# define $1

${0}

#endif
endsnippet

snippet wh
while (${1:/* condition */})
{
    ${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet


snippet if
if (${1:/* condition */})
{
    ${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet el
else {
    ${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet ife
if (${1:/* condition */})
{
    ${2:/* code */}
}
else
{
    ${3:/* else */}
}
endsnippet

snippet printf
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet fn "function" b
${1:static }${2:void}       ${3}${4:*}${5:ft_}${6:name}(${7:void})
{
    ${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet fnd "function declaration" b
${1:void} ${2:function_name}(${3});
endsnippet
